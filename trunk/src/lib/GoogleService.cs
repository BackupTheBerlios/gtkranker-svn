// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.573
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Mono Web Services Description Language Utility
//

/// <remarks/>

namespace ranker.lib.GoogleService {
    using System.Diagnostics;
    using System;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
	[System.Web.Services.WebServiceBinding(Name="GoogleSearchPort",Namespace="urn:GoogleSearch"),
	System.Diagnostics.DebuggerStepThroughAttribute(),
	System.ComponentModel.DesignerCategoryAttribute("code"),
	System.Xml.Serialization.SoapInclude(typeof(ResultElement))]
	public class GoogleSearchService: System.Web.Services.Protocols.SoapHttpClientProtocol {
	    
	    public GoogleSearchService () {
	        this.Url = "http://api.google.com/search/beta2";
	    }
	    
	    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:GoogleSearchAction",RequestNamespace="urn:GoogleSearch",ResponseNamespace="urn:GoogleSearch")]
	    [return: System.Xml.Serialization.SoapElement("return")]
	    public byte[] doGetCachedPage(string key, string url) {
	        object[] results = this.Invoke("doGetCachedPage", new object[] {
	            key,
	            url});
	        return ((byte[])(results[0]));
	    }
	    
	    public System.IAsyncResult BegindoGetCachedPage(string key, string url, System.AsyncCallback callback, object asyncState) {
	        return this.BeginInvoke("doGetCachedPage", new object[] {
	            key,
	            url}, callback, asyncState);
	    }
	    
	    public byte[] EnddoGetCachedPage(System.IAsyncResult asyncResult) {
	        object[] results = this.EndInvoke(asyncResult);
	        return ((byte[])(results[0]));
	    }
	    
	    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:GoogleSearchAction",RequestNamespace="urn:GoogleSearch",ResponseNamespace="urn:GoogleSearch")]
	    [return: System.Xml.Serialization.SoapElement("return")]
	    public string doSpellingSuggestion(string key, string phrase) {
	        object[] results = this.Invoke("doSpellingSuggestion", new object[] {
	            key,
	            phrase});
	        return ((string)(results[0]));
	    }
	    
	    public System.IAsyncResult BegindoSpellingSuggestion(string key, string phrase, System.AsyncCallback callback, object asyncState) {
	        return this.BeginInvoke("doSpellingSuggestion", new object[] {
	            key,
	            phrase}, callback, asyncState);
	    }
	    
	    public string EnddoSpellingSuggestion(System.IAsyncResult asyncResult) {
	        object[] results = this.EndInvoke(asyncResult);
	        return ((string)(results[0]));
	    }
	    
	    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:GoogleSearchAction",RequestNamespace="urn:GoogleSearch",ResponseNamespace="urn:GoogleSearch")]
	    [return: System.Xml.Serialization.SoapElement("return")]
	    public GoogleSearchResult doGoogleSearch(string key, string q, int start, int maxResults, bool filter, string restrict, bool safeSearch, string lr, string ie, string oe) {
	        object[] results = this.Invoke("doGoogleSearch", new object[] {
	            key,
	            q,
	            start,
	            maxResults,
	            filter,
	            restrict,
	            safeSearch,
	            lr,
	            ie,
	            oe});
	        return ((GoogleSearchResult)(results[0]));
	    }
	    
	    public System.IAsyncResult BegindoGoogleSearch(string key, string q, int start, int maxResults, bool filter, string restrict, bool safeSearch, string lr, string ie, string oe, System.AsyncCallback callback, object asyncState) {
	        return this.BeginInvoke("doGoogleSearch", new object[] {
	            key,
	            q,
	            start,
	            maxResults,
	            filter,
	            restrict,
	            safeSearch,
	            lr,
	            ie,
	            oe}, callback, asyncState);
	    }
	    
	    public GoogleSearchResult EnddoGoogleSearch(System.IAsyncResult asyncResult) {
	        object[] results = this.EndInvoke(asyncResult);
	        return ((GoogleSearchResult)(results[0]));
	    }
	}

	/// <remarks/>
	[System.Xml.Serialization.SoapType(Namespace="urn:GoogleSearch")]
	public class GoogleSearchResult {
	    
	    /// <remarks/>
	    public bool documentFiltering;
	    
	    /// <remarks/>
	    public string searchComments;
	    
	    /// <remarks/>
	    public int estimatedTotalResultsCount;
	    
	    /// <remarks/>
	    public bool estimateIsExact;
	    
	    /// <remarks/>
	    public ResultElement[] resultElements;
	    
	    /// <remarks/>
	    public string searchQuery;
	    
	    /// <remarks/>
	    public int startIndex;
	    
	    /// <remarks/>
	    public int endIndex;
	    
	    /// <remarks/>
	    public string searchTips;
	    
	    /// <remarks/>
	    public DirectoryCategory[] directoryCategories;
	    
	    /// <remarks/>
	    public double searchTime;
	}

	/// <remarks/>
	[System.Xml.Serialization.SoapType(Namespace="urn:GoogleSearch")]
	public class ResultElement {
	    
	    /// <remarks/>
	    public string summary;
	    
	    /// <remarks/>
	    public string URL;
	    
	    /// <remarks/>
	    public string snippet;
	    
	    /// <remarks/>
	    public string title;
	    
	    /// <remarks/>
	    public string cachedSize;
	    
	    /// <remarks/>
	    public bool relatedInformationPresent;
	    
	    /// <remarks/>
	    public string hostName;
	    
	    /// <remarks/>
	    public DirectoryCategory directoryCategory;
	    
	    /// <remarks/>
	    public string directoryTitle;
	}

	/// <remarks/>
	[System.Xml.Serialization.SoapType(Namespace="urn:GoogleSearch")]
	public class DirectoryCategory {
	    
	    /// <remarks/>
	    public string fullViewableName;
	    
	    /// <remarks/>
	    public string specialEncoding;
	}

}